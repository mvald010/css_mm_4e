"""
    Author: Marsha Valdivieso
    Date: 7/23/2020
    Description: Using the code created from last week. Learn import a cvs file .
"""

import csv
from datetime import datetime

if __name__ == "__main__":
    stocks = []
    try:
        with open('Lesson6_Data_Stocks.csv', newline=) as f:
            reader = csv.reader(f)
            next(reader)
            for row in reader:
                stock_info = {"SYMBOL":[0], "NO_SHARE":row[1], "PURCHASE_PRICE":row[2], "CURRENT_PRICE":row[3], "PURCHASE_DATE":row[4]}
                stocks.append(stock_info)
    except Exception:
        print("Cannot read file!")

#setup class definitions
class Stock:
    def __init__(self, stock_id, stock_symbol, num_shares, purchase_price,current_value, purchase_date):
        self.stock_id = stock_id
        self.stock_symbol = stock_symbol
        self.num_shares = num_shares
        self.purchase_price = purchase_price
        self.current_value = current_value
        self.purchase_date = purchase_date
        self.earning_loss = None
        self.percent_earning = None

#calculations
def earnings_losses (self):
    self.earning_loss = round((self.current_value - self.purchase_price) * (self.num_shares),2)
    return self.earning_loss

def percent_earnings (self):
    self.percent_earning = round(((self.current_value - self.purchase_date)/self.purchase_price)*100,2)
    return self.percent_earning
def yearly_earnings (self):
    today = datetime.now()
    time_diff = today - datetime.strftime(self.purchase_date, "%m/%d/%Y")
    num_years = time_diff.days //365
    year_earnings = str((round(self.percent_earning/num_years),2)) + "%"
    return year_earnings

class Bonds(stock):
    def __init__(self, stock_id, stock_symbol, num_shares, purchase_price, current_value, coupon, yields, purchase_date):
        super().__init__(stock_id, stock_symbol, num_shares, purchase_price, current_value, purchase_date)
        self.coupon = coupon
        self.yields = yields
class Investor():
    def __init__(self, investor_id, name, address, phone_num):
        self.investor_id = investor_id
        self.name = name
        self.address = address
        self.phone_num = phone_num

    def id(self):
        return self.investor_id

    def full_name(self):
        return self.name

    def get_address(self):
        return self.address

    def p_num(self):
        return self.phone_num

 #Input stock information
 stock_info = [{"stock_id" : 1, "stock_symbol" : "GOOGLE", "num_shares" : 125, "purchase_price" : 772.88,
                "current_value" : 941.53, "purchase_date" : "08/01/2017"},
               {"stock_id" : 2, "stock_symbol" : "MSFT", "num_shares" : 85, "purchase_price" : 56.60,
                "current_value" : 73.04, "purchase_date" : "08/01/2017"},
               {"stock_id" : 3, "stock_sumbol" : "RDS-A","num_shares" : 400, "purchase_price" : 49.58,
                "current_value" : 55.74, "purchase_date": "08/01/2017"},
               {"stock_id" : 4, "stock_symbol" : "AIG", "num_shares" : 235, "purchase_price" : 54.21,
                "current_value" : 65.27, "purchase_date" : "08/01/2017"},
               {"stock_id" : 5, "stock_symbol" : "FB","num_shares" : 130, "purchase_price" : 124.31,
                "current_value" : 175.45, "purchase_date" : "08/01/2017"},
               {"stock_id" : 6, "stock_symbol" : "M", "num_shares":425, "purchase_price" : 30.30,
                "current_value" : 23.98, "purchase_date" : "01/10/2018"},
               {"stock_id" : 7, "stock_symbol" : "F", "num_shares": 85, "purchase_price" : 12.58,
                "current_value" : 10.95, "purchase_date" : "02/17/2018"},
               {"stock_id" : 8, "stock_symbol" : "IBM", "num_shares": 80, "purchase_price" : 150.37,
                "current_value" : 145.30, "purchase_date" : "05/12/2018"}
               ]

bond_info = {"stock_id" : 1, "stock_symbol" : "GT2.GOV", "purchase_price" : 100.02, "current_value" : 100.05,
             "quantity" : 200, "coupon" : 1.38, "yield" : "1.35%" }

investor_info = investor(777, "Bob Smith", "631 University Dr, Florida", "954-999-1234")

#output investor info
print("-"*95)
print(investor_print.fullname())
print(investor_print.get_address())
print(investor_print.p_num())
print("-"*95)
print()
print()

#output stock info
print("-"*95)
print("Stock Ownership for Bob Smith")
print("-"*95)
print("Stock", "Share #", "Earning/Loss", "Yearly Earnings/Loss")
print("-"*95)

for i, e in enumerate(stock_info):
    stock_print = stock(e["stock_id"], e["stock_symbol"], e["num_shares"], e["purchase_price"], e["current_value"],
                         e["purchase_date"])
    loss_gain = "$" + str(stock_print.percent_earnings())
    loss_gain_per = stock_print.percent_earnings()
    yearly_earnings_per = stock_print.yearly_earnings()
    print({e["Stock Symbol"]}| {e["No. Shares"]}| {loss_gain}| {yearly_earnings_per} )

bond_print = bonds(bond_info["purchase_price"], bond_info["stock_symbol"], bond_info["purchase_price"],
                   bond_info["current_value"], bond_info["quantity"], bond_info["coupon"], bond_info["yields"])

bond_print.percent_earnings()

print("-"*95)
print()
print("Bond Ownership")
print("-"*95)
print()
print("Bond" "Quantity" "Coupon" "Earnings/loss" "Yearly Earnings/loss")
print("-"*95)
print(f"{bond_print.stock_symbol} {bond_print.num_shares} {bond_print.coupon()} {bond_print.get_yield()} {bond_print.earning_loss} {bond_print.yearly_earnings}")
print("-"*95)
